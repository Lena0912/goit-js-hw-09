{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIMQ,SAASC,cAAc,SAC/BC,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBAEN,IAAMC,EAAaL,SAASC,cAAc,kBACpCK,EAAYN,SAASC,cAAc,iBACnCM,EAAcP,SAASC,cAAc,mBAErCO,EAAQC,SAASJ,EAAWK,OAC5BC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAEpC,GAAIG,MAAML,IAAUK,MAAMF,IAASE,MAAMD,GACvCE,EAAA1B,GAAS2B,OAAOC,QAAQ,mCAK1B,IADF,IAAIC,EAAeT,EACRU,EAAI,EAAGA,GAAKN,EAAQM,IAC3B5B,EAAc4B,EAAGD,GACdE,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBsB,EAAA1B,GAAS2B,OAAOM,QAAQ,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAEvE+B,OAAM,SAAAH,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBsB,EAAA1B,GAAS2B,OAAOC,QAAQ,sBAAqCM,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAGvEyB,GAAgBN,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('[name=\"delay\"]');\n  const stepInput = document.querySelector('[name=\"step\"]');\n  const amountInput = document.querySelector('[name=\"amount\"]');\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n    Notiflix.Notify.failure('Please enter valid numbers');\n    return;\n  }\n\nlet currentDelay = delay;\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    currentDelay += step;\n  }\n});\n  \n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","delay1","parseInt","value","step","amount","isNaN","$parcel$interopDefault","Notify","failure","currentDelay","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.401affb6.js.map"}